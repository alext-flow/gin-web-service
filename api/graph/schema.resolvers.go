package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"common/models"
	"context"
	"fmt"
)

// TypeID is the resolver for the typeID field.
func (r *albumResolver) TypeID(ctx context.Context, obj *models.Album) (string, error) {
	panic(fmt.Errorf("not implemented: TypeID - typeID"))
}

// ID is the resolver for the id field.
func (r *albumTypeResolver) ID(ctx context.Context, obj *models.AlbumType) (string, error) {
	return obj.ID.String(), nil
}

// CreateAlbum is the resolver for the createAlbum field.
func (r *mutationResolver) CreateAlbum(ctx context.Context, title string, artist string, price float64, albumTypeName string, albumTypeDesc string) (*models.Album, error) {
	newAlbum := models.Album{
		Title:  title,
		Artist: artist,
		Price:  price,
	}
	album, err := r.AlbumRepo.CreateAlbum(newAlbum, albumTypeName, albumTypeDesc)
	if err != nil {
		return nil, err
	}
	return album, nil
}

// UpdateAlbum is the resolver for the updateAlbum field.
func (r *mutationResolver) UpdateAlbum(ctx context.Context, id string, title *string, artist *string, price *float64) (*models.Album, error) {
	panic(fmt.Errorf("not implemented: UpdateAlbum - updateAlbum"))
}

// DeleteAlbum is the resolver for the deleteAlbum field.
func (r *mutationResolver) DeleteAlbum(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAlbum - deleteAlbum"))
}

// Albums is the resolver for the albums field.
func (r *queryResolver) Albums(ctx context.Context) ([]*models.Album, error) {
	albums, err := r.AlbumRepo.Albums()
	if err != nil {
		return nil, fmt.Errorf("albums - %w", err)
	}
	return albums, nil
}

// Album is the resolver for the album field.
func (r *queryResolver) Album(ctx context.Context, id string) (*models.Album, error) {
	album, err := r.AlbumRepo.Album(id)
    if err != nil {
        return nil, err
    }
    if album == nil {
        return nil, fmt.Errorf("No album found with id: %s", id)
    }
    return album, nil
	//panic(fmt.Errorf("not implemented: Album - album"))
}

// Album returns AlbumResolver implementation.
func (r *Resolver) Album() AlbumResolver { return &albumResolver{r} }

// AlbumType returns AlbumTypeResolver implementation.
func (r *Resolver) AlbumType() AlbumTypeResolver { return &albumTypeResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type albumResolver struct{ *Resolver }
type albumTypeResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
